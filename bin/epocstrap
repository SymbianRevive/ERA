#!/usr/bin/env bash
set -Eeuo pipefail

_IN_EPOCSTRAP=1
export _IN_EPOCSTRAP

_EPOCROOT_MOUNTED=0
_FORCE_NEW_CLONE=0

_MODERN_GCC=1
_LEGACY_GCC=1

_cleanup () {
  if (( _EPOCROOT_MOUNTED )) && mountpoint "${EPOCROOT}" &>/dev/null ; then
    fusermount -u "${EPOCROOT}" &>/dev/null \
      || fusermount -z -u "${EPOCROOT}" &>/dev/null \
      || :
    rmdir "${EPOCROOT}" &>/dev/null ||:
  fi
}

_err () {
  >&2 echo "Error $1 occurred at line $2 in script \"$3\""
  _cleanup
  exit "$1"
}

_int () {
  >&2 echo 'Interrupted...'
  _cleanup
  exit 130
}

trap '_err $? ${LINENO} "${BASH_SOURCE[0]}"' ERR
trap '_int' INT

_DEBUG=0
_OVERWRITE=0

_usage () {
  >&2 echo "USAGE: $0 [-fFcdh] [-j N] [-S N] [-r EPOCROOT] [COMPONENTS...]"
}

_help () {
  _usage
  >&2 cat <<EOF

  Create or update an EPOCROOT

  - If the EPOCROOT argument is not supplied, the EPOCROOT env is used instead
  - If neither of the argument and the env are set, the new EPOCROOT is created
    in "\$HOME/epocroot/"

ARGUMENTS

  COMPONENTS
        additional components to install

OPTIONS
  -r EPOCROOT
        target location for the new EPOCROOT
  -f
        overwrite any existing EPOCROOT
  -F
        wipe any existing EPOCROOT
  -c
        remove and clone all previously cached repositories from scratch
  -d
        debug this script
  -h
        display this message
  -j N
        number of jobs per build
  -S N
        number of simultaneous builds
        (please not that this is distinct from the number of jobs per build)
  -x N
        number of simultaneous tar operations

CAVEAT

  An EPOCROOT created using this tool is usually not usable as-is

  For a complete solution, see "systemd-epocd"

SUPPORT

  For more info about ERA, visit https://github.com/SymbianRevive

LICENSE

  0BSD

AUTHORS

  SymbianRevive

COMPONENTS

  Compilers:
        modern-gcc gcce
EOF
}

MAKEJOBS=${MAKEJOBS:-$(nproc)}
_SIMULTANEOUS_EXTRACTS=${_SIMULTANEOUS_EXTRACTS:-$(( $(nproc) / 2 + 1 ))}
_SIMULTANEOUS_BUILDS=${_SIMULTANEOUS_BUILDS:-1}

export MAKEJOBS

while getopts ':r:fFcj:S:x:mMdh' o ; do
  case "$o" in
    r)
      EPOCROOT="${OPTARG}"
      ;;
    f)
      _OVERWRITE=1
      ;;
    F)
      _OVERWRITE=2
      ;;
    d)
      _DEBUG=1
      ;;
    c)
      _FORCE_NEW_CLONE=1
      ;;
    m)
      _LEGACY_GCC=0
      ;;
    M)
      _MODERN_GCC=0
      ;;
    j)
      MAKEJOBS="${OPTARG}"
      ;;
    S)
      _SIMULTANEOUS_BUILDS="${OPTARG}"
      ;;
    x)
      _SIMULTANEOUS_EXTRACTS="${OPTARG}"
      ;;
    h)
      _help
      exit 1
      ;;
    *)
      _usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if (( _DEBUG )) ; then
  set -x
else
  MAKEFLAGS+=" -s"
fi

MAKEFLAGS+=" -j${MAKEJOBS}"

export MAKEFLAGS

_INSTALL_COMPONENTS=("$@")

_check_required_commands () {
  for cmd in "$@" ; do
    if ! command -v "${cmd}" &>/dev/null ; then
      >&2 echo "\"${cmd}\" is not available, but it's strictly required for this script to operate properly"
      >&2 echo "Please install the package containing \"${cmd}\" to use this script"
      exit 1
    fi
  done
}

_check_required_commands tac git bash perl gcc g++ ld cpp lz4 wget
if [[ "${_INSTALL_COMPONENTS[*]}" != *"modern-gcc"* ]] \
  && [[ "${_INSTALL_COMPONENTS[*]}" != *"gcce"* ]] ; then
  _check_required_commands \
    arm-none-symbianelf-c++ arm-none-symbianelf-cpp arm-none-symbianelf-g++ \
    arm-none-symbianelf-gcc arm-none-symbianelf-gcc-ar \
    arm-none-symbianelf-gcc-nm arm-none-symbianelf-gcc-ranlib \
    arm-none-symbianelf-gcov arm-none-symbianelf-gcov-dump \
    arm-none-symbianelf-gcov-tool arm-none-symbianelf-lto-dump \
    arm-none-symbianelf-addr2line arm-none-symbianelf-ar \
    arm-none-symbianelf-as arm-none-symbianelf-c++filt \
    arm-none-symbianelf-elfedit arm-none-symbianelf-gprof \
    arm-none-symbianelf-ld arm-none-symbianelf-nm arm-none-symbianelf-objcopy \
    arm-none-symbianelf-objdump arm-none-symbianelf-ranlib \
    arm-none-symbianelf-readelf arm-none-symbianelf-size \
    arm-none-symbianelf-strings arm-none-symbianelf-strip
fi

if (( _SIMULTANEOUS_BUILDS > 1 )) || (( _SIMULTANEOUS_EXTRACTS > 1 )) ; then
  _check_required_commands parallel
fi

EPOCROOT="${EPOCROOT:-$HOME/epocroot}"

export EPOCROOT

if [[ -e "${EPOCROOT}" ]] ; then
  if (( ! _OVERWRITE )) ; then
    >&2 echo "\"${EPOCROOT}\" already exists"
    >&2 echo "Use '-f' to force-overwrite it"
    exit 1
  elif [[ ! -d "${EPOCROOT}" ]] && (( _OVERWRITE < 2 )); then
    >&2 echo "EPOCROOT is not a directory"
    >&2 echo "Refusing to force-overwrite"
    exit 1
  elif (( _OVERWRITE >= 2 )) ; then
    >&2 echo '!!! CAUTION !!!'
    >&2 echo "Removing an existing EPOCROOT at \"${EPOCROOT}\""
    >&2 echo 'Press ^C (i.e. press "c" while holding the "Ctrl" key) to abort!'
    for i in $(seq 1 5 | tac) ; do
      >&2 echo -n "$i... "
      sleep 1s
    done
    >&2 echo '0...'
    >&2 echo 'Now removing the EPOCROOT'
    rm -rvf "${EPOCROOT}"
  fi
fi

>&2 echo -e '==> Boostrapping the environment'

readonly REAL_EPOCROOT="${EPOCROOT}"

mkdir -p "${EPOCROOT}"/epoc32/sbs_config
mkdir -p "${EPOCROOT}"/epoc32/tools
mkdir -p "${EPOCROOT}"/epoc32/include

>&2 echo -e ' ==> Checking case-sensitivity of the filesystem'
rm -rf "${EPOCROOT}"/.check_case "${EPOCROOT}"/.CHECK_CASE
touch "${EPOCROOT}"/.check_case
if [[ ! -e "${EPOCROOT}"/.CHECK_CASE ]] ; then
  >&2 echo ' ==> CASE-SENSITIVE filesystem detected!'

  _check_required_commands cicpoffs fusermount

  EPOCROOT="$(mktemp -d)"

  >&2 echo "  ==> Will remount \"${REAL_EPOCROOT}\" to \"${EPOCROOT}\""

  _EPOCROOT_MOUNTED=1
  cicpoffs -o attr_timeout=0 -o entry_timeout=0 "${REAL_EPOCROOT}" "${EPOCROOT}"
  export EPOCROOT

  if [[ ! -e "${EPOCROOT}"/.CHECK_CASE ]] ; then
    >&2 echo -e '!!! FATAL !!!'
    >&2 echo -e '"cicpoffs" failed sanity checks!'
    >&2 echo -e 'Refusing to operate on a broken filesystem'
    exit 1
  fi
else
  >&2 echo -e ' ==> The filesystem is already case-insensitive'
fi
rm -f "${EPOCROOT}"/.check_case

EPOCSTRAP_CACHEDIR=${EPOCSTRAP_CACHEDIR:-${HOME}/.cache/epocstrap}
>&2 echo " ==> Ensuring the cache directory exists at \"${EPOCSTRAP_CACHEDIR}\""
mkdir -p "${EPOCSTRAP_CACHEDIR}"

>&2 echo " ==> Preparing ENV variables"
export PATH="${PATH}":"${REAL_EPOCROOT}"/epoc32/tools/sbs/bin:"${REAL_EPOCROOT}"/epoc32/tools
export GCCE463_PREFIX="${REAL_EPOCROOT}"/epoc32/tools/gcce-4.6.3
export SBS_GCCE463BIN="${GCCE463_PREFIX}"/bin
export SBS_GCCMBIN=$(dirname -- "$(command -v arm-none-symbianelf-gcc)")
export SBS_GCCX86BIN=$(dirname -- "$(command -v gcc)")
export SBS_GCCX86INC=$(dirname -- "$(command -v gcc)")/../include
export SBS_GCCX86LIB=$(dirname -- "$(command -v gcc)")/../lib
export SBS_SHELL=$(command -v bash)
export SBS_HOME="${REAL_EPOCROOT}"/epoc32/tools/sbs

_SCRIPT_DIR=$(dirname -- "$(realpath -- "$0")")
_AUX_DIR=$(dirname -- "${_SCRIPT_DIR}")/lib/era

_just_extract () {
  local subdir
  subdir=${1%%-*}
  mkdir -p "${subdir}"
  >&2 echo "Extracting \"$1\" to \"${subdir}\""
  &>/dev/null tar -xaf "$1" -C "${subdir}" --strip-components=1
  echo "${subdir}"
}
export -f _just_extract 

_build_tool () {
  >&2 sbs -k -q --jobs "${MAKEJOBS}" -c tools2 -b "$1" reallyclean
  >&2 sbs -k -q --jobs "${MAKEJOBS}" -c tools2 -b "$1"
}
export -f _build_tool

_build_target () {
  >&2 sbh -k -q --jobs "${MAKEJOBS}" -c gcce_armv5 -b "$1" reallyclean
  >&2 sbs -k -q --jobs "${MAKEJOBS}" -c gcce_armv5 -b "$1"
}
export -f _build_target

_maybe_build_tool () {
  >&2 sbs -k -q --jobs "${MAKEJOBS}" -c tools2 -b "$1" reallyclean ||:
  >&2 sbs -k -q --jobs "${MAKEJOBS}" -c tools2 -b "$1" ||:
}
export -f _maybe_build_tool

_multi_build () {
  local f
  f="$1"
  shift
  if (( _SIMULTANEOUS_BUILDS > 1 )) ; then
    parallel --jobs="${_SIMULTANEOUS_BUILDS}" "$f" ::: "$@"
  else
    for tool in "$@" ; do "$f" "${tool}" ; done
  fi
}

_multi_extract () {
  local f
  f="$1"
  shift
  if (( _SIMULTANEOUS_BUILDS > 1 )) ; then
    parallel --jobs="${_SIMULTANEOUS_EXTRACTS}" "$f" ::: "$@"
  else
    for tool in "$@" ; do "$f" "${tool}" ; done
  fi
}

_clone_or_pull () {
  if [[ -d "$2" ]] && (( ! _FORCE_NEW_CLONE )) ; then
    >&2 git -C "$2" checkout -f ||:
    >&2 git -C "$2" clean -fdx ||:
    >&2 git -C "$2" pull
  else
    rm -rf "$2"
    >&2 git clone --single-branch -- "$1" "$2"
  fi
}

&>/dev/null pushd "${EPOCSTRAP_CACHEDIR}"/
  if [[ ! -f "${_AUX_DIR}"/get-version.sh ]] ; then
    >&2 echo -e ' ==> Downloading the latest version of ERA'
    _clone_or_pull "${EPOCSTRAP_REPO:-https://github.com/SymbianRevive/ERA.git}" epocstrap
    _AUX_DIR="${PWD}"/epocstrap/lib/era
  fi
  export PATH="${_AUX_DIR}":"${PATH}"

  if [[ "${_INSTALL_COMPONENTS[*]}" == *"gcce"* ]] ; then
    # TODO: Figure out how to build CS GCCE correctly
    # CodeSourcery GCCE 4
    source "$(command -v install-gcce.sh)"
  fi

  if [[ "${_INSTALL_COMPONENTS[*]}" == *"modern-gcc"* ]] ; then
    # TODO: Add a build script for Modern Symbian GCC
    # Modern Symbian GCC
    source "$(command -v install-modern-gcc.sh)"
  fi

  # symbian-headers
  source "$(command -v install-headers.sh)"

  # symbian-build
  source "$(command -v install-raptor.sh)"

  # symbian-implibs
  source "$(command -v install-implibs.sh)"

  for component in "${_INSTALL_COMPONENTS[@]}" ; do
    case "${component}" in
      gcc*|*gcc)
        # All instances of GCC(E) need to be handled before
        ;;
      *)
        >&2 echo " ==> Installing additional component \"${component}\""
        _component_script="$(command -v "install-${component}.sh")"
        source "${_component_script:?No known recipe for this component}"
        ;;
    esac
  done
&>/dev/null popd

>&2 echo -e '==> Fixing permissions'
chmod +x "${REAL_EPOCROOT}"/epoc32/tools/*.pl

>&2 echo -e '==> The environment is ready!'
>&2 echo -e '\nYou can export the following environment variables now:\n'

>&2 echo -n ' '
echo "export EPOCROOT=${REAL_EPOCROOT}"
>&2 echo -n ' '
echo 'export PATH="${PATH}":"${EPOCROOT}"/epoc32/tools/sbs/bin:"${EPOCROOT}"/epoc32/tools'
>&2 echo -n ' '
echo "export SBS_GCCMBIN=${SBS_GCCMBIN}"
#>&2 echo -n ' '
#echo "export SBS_GCCE463BIN=${SBS_GCCE463BIN}"
>&2 echo -n ' '
echo "export SBS_GCCX86BIN=${SBS_GCCX86BIN}"
>&2 echo -n ' '
echo "export SBS_GCCX86INC=${SBS_GCCX86INC}"
>&2 echo -n ' '
echo "export SBS_GCCX86LIB=${SBS_GCCX86LIB}"
>&2 echo -n ' '
echo "export SBS_SHELL=${SBS_SHELL}"
>&2 echo -n ' '
echo "export SBS_HOME=${REAL_EPOCROOT}/epoc32/tools/sbs"

>&2 echo -e '\nYou will then be able to run SBSv2 "raptor" build system as follows:\n'
>&2 echo ' sbs -c armv5_gcce -b /path/to/group/build.inf'

>&2 echo -e '\nThanks a lot for choosing SymbianRevive!'
>&2 echo 'For more info about epocstrap and SymbianRevive, visit https://github.com/SymbianRevive'

_cleanup
